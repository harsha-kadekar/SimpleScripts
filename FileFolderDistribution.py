#######################################################################################################################
# Name: FileFolderDistribution.py
# Description: This is a python script which will list all the files and folders in the given path. It will give you
#               which folders have higher size.
#               usage: FFDistribution.py <<File/Folder absolute path>>
# Date: 6/17/2016
# Reference:
# Developer: Harsha Kadekar
#######################################################################################################################

import os
import sys
import decimal

def fileDetails(filePath):
    '''
    This function will get the details related to the file whose path has been passed to this function.
    It collects - size, parent directory and name of that file.
    :param filePath: absolute path of the file whose details needs to be collected
    :return: A dictionary of file attributes - type, size, parent, name, distribution, children
    '''
    fileAttributes = {}
    fileInfo = os.stat(filePath)
    fileAttributes.__setitem__('type', 'FILE')
    fileAttributes.__setitem__('size', fileInfo.st_size)
    fileAttributes.__setitem__('parent', os.path.dirname(filePath))
    pathParts = filePath.split('\\')
    fileName = pathParts[pathParts.__len__() - 1]
    fileAttributes.__setitem__('name',fileName)
    fileAttributes.__setitem__('distribution',fileName + '=100%')
    fileAttributes.__setitem__('children',[])
    return fileAttributes

def folderDetails(folderPath):
    '''
    This function will give the details related to the folder whose absolute path has been passed to this function.
    It will find the attributes like parent directory, folder name, total size of the folder, list of its children
    along with their attributes and finally size distribution of its children within this directory.
    :param folderPath: absolute path of the folder whose details needs to be calculated
    :return: A dictionary of folder attributes - type, size, parent, name, distribution, children
    '''
    distribution = ''
    size = 0
    children = []
    folderAttributes = {}
    folderAttributes.__setitem__('type', 'FOLDER')
    folderAttributes.__setitem__('parent', os.path.dirname(folderPath))
    pathParts = folderPath.split('\\')
    folderName = pathParts[pathParts.__len__() - 1]
    folderAttributes.__setitem__('name', folderName)

    for dirpath, dirnames, filenames in os.walk(folderPath):
        for filename in filenames:
            fileEntity = {}
            fullfilePath = os.path.join(dirpath, filename)
            details = fileDetails(fullfilePath)
            fileEntity.__setitem__(fullfilePath, details)
            size += details['size']
            children.append(fileEntity)
        for dirname in dirnames:
            dirEntity = {}
            fullDirPath = os.path.join(dirpath, dirname)
            details = folderDetails(fullDirPath)
            dirEntity.__setitem__(fullDirPath, details)
            size += details['size']
            children.append(dirEntity)
        break

    folderAttributes.__setitem__('size', size)
    # print 'size = ' + size.__str__()
    if size > 0:
        for child in children:
            for childname in child.keys():
                childEntity = child[childname]
                # print childEntity['name'] + childEntity['size'].__str__()
                # print childEntity['size']/size
                val = float(childEntity['size'])
                val2 = float(size)
                percent = val / val2
                actualpercent = percent * 100
                value = decimal.Decimal(actualpercent)
                dist = childEntity['name'] + '=' + round(value, 2).__str__() + '%,\t'
                distribution += dist

        distribution = distribution[:distribution.__len__()-2]
    folderAttributes.__setitem__('distribution', distribution)
    folderAttributes.__setitem__('children', children)

    return folderAttributes

def display(info):
    '''
    This function is used to display the contents of file folder heirarchy generated by the function collectAttributes
    :param info: A dictionary key - absolute path, value - attributes related to that path
    :return:
    '''
    for path in info.keys():
        print 'Details of ' + path
        PrintDetails(info[path])
        if info[path]['children'].__len__() > 0:
            for entity in info[path]['children']:
                display(entity)


def PrintDetails(pathEntity):
    '''
    A function which prints the information related to a single file/folder entity
    :param pathEntity: A dictionary containing key-value pairs of file/folder attributes
    :return:
    '''
    print "=================================================="
    print '\n'
    print 'NAME:' + pathEntity['name']
    print 'TYPE:' + pathEntity['type']
    print 'PARENT:' + pathEntity['parent']
    print 'SIZE:' + PresentableSize(pathEntity['size'])
    print 'DISTRIBUTION:' + pathEntity['distribution']
    print '\n'
    print "=================================================="

def PresentableSize(size):
    '''
    This function converts the given number into either of the following entities based on its value - GB, MB, KB, Bytes
    :param size: a number which needs a readable representation
    :return: a string which describes the size as bytes, GB, MB, KB
    '''
    strSize = ''
    GB = 1024.0*1024.0*1024.0
    MB = 1024.0*1024.0
    KB = 1024.0
    if size > GB:
        val = float(size/GB)
        strSize = round(val, 2).__str__() + ' GB'
    elif size > MB:
        val = float(size/MB)
        strSize = round(val, 2).__str__() + ' MB'
    elif size > KB:
        val = float(size/KB)
        strSize = round(val, 2).__str__() + ' KB'
    else:
        strSize = round(size, 2).__str__() + ' bytes'
    return strSize

def collectAttributes(folderPath):
    '''
    This function either calls folderDetails or fileDetails based on the given path. If path is of folder than
    folderDetails will be called else fileDetails. Once it gets the attributes it will form a dictionary and returns
    :param folderPath: Path given by user whose details needs to be collected
    :return: A dictionary key - folder/file path, value - a dictionary of file/folder attributes
    '''
    info = {}
    details = None
    if os.path.isdir(folderPath):
        print 'Given path is a folder'
        details = folderDetails(folderPath)

    elif os.path.isfile(folderPath):
        print 'Given path is a file'
        details = fileDetails(folderPath)

    info.__setitem__(folderPath, details)
    return info

def main():
    '''
    This parses the given user argument. If valid number of arguments found then it will collect the attributes of that
    entity and finally displays them
    :return:
    '''
    if sys.argv.__len__() == 2:
        folderPath = sys.argv[1]
    else:
        print 'USAGE: FileDistFolder <<file or folder path>>'
        return

    print 'Path given: ' + folderPath

    info = collectAttributes(folderPath)

    print "**********************************************************************************************************"
    display(info)
    print "**********************************************************************************************************"

    return

if __name__ == '__main__':
    main()
    pass